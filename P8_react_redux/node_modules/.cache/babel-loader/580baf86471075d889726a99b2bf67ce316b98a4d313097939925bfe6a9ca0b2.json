{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { axiosInstance } from \"./axiosInstance\";\nexport const apiCall = (requsetType, apiPrefix, url, paramId, e, formData) => async action => {\n  try {\n    if (e !== undefined) {\n      e.preventDefault();\n    }\n    let res;\n    action({\n      type: `${apiPrefix}_API_REQUEST`\n    }); // state.loading :true\n\n    if (requsetType === \"POST\") {\n      res = await axiosInstance.post(`${apiPrefix}${url}`, formData);\n    } else if (requsetType === \"PUT\" && paramId !== undefined) {\n      res = await axiosInstance.put(`${apiPrefix}${url}/${paramId}`, formData);\n    } else if (requsetType === \"GET\") {\n      if (paramId !== undefined) {\n        res = await axiosInstance.get(`${apiPrefix}${url}/${paramId}`);\n      } else {\n        res = await axiosInstance.get(`${apiPrefix}${url}`);\n      }\n    } else if (requsetType === \"DELETE\") {\n      if (paramId !== undefined) {\n        res = await axiosInstance.delete(`${apiPrefix}${url}/${paramId}`);\n      } else {\n        res = await axiosInstance.delete(`${apiPrefix}${url}`);\n      }\n    }\n    if (res.status === 200 && apiPrefix === \"USER\") {\n      action({\n        type: `${apiPrefix}_API_SUCCESS`,\n        message: res.data.message,\n        username: res.data.username,\n        email: res.data.email\n      });\n      toast.success(res.data.message);\n      return true;\n    }\n    if (res.status === 200 && apiPrefix === \"POST\") {\n      action({\n        type: `${apiPrefix}_API_SUCCESS`,\n        postArr: res.data.payload,\n        message: res.data.message\n      });\n      toast.success(res.data.message);\n      return true;\n    }\n  } catch (err) {\n    console.error(err);\n    if (err.message === \"Network Error\") {\n      toast.error(\"Network error. Please check your connection.\");\n      return;\n    } else {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Something went wrong\";\n      action({\n        type: `${apiPrefix}_API_FAILURE`,\n        error: err,\n        message: errorMessage\n      });\n      toast.error(errorMessage);\n    }\n    return false;\n  }\n};","map":{"version":3,"names":["toast","axiosInstance","apiCall","requsetType","apiPrefix","url","paramId","e","formData","action","undefined","preventDefault","res","type","post","put","get","delete","status","message","data","username","email","success","postArr","payload","err","console","error","_err$response","_err$response$data","errorMessage","response"],"sources":["/home/irfan_usuf/ILS/GIT004/P3_fuzzyGoggle/redux2/src/utils/apiCall.js"],"sourcesContent":["import { toast } from \"react-toastify\";\nimport { axiosInstance } from \"./axiosInstance\";\n\nexport const apiCall =\n  (requsetType, apiPrefix, url, paramId, e, formData) => async (action) => {\n    try {\n      if (e !== undefined) {\n        e.preventDefault();\n      }\n\n      let res;\n\n      action({ type: `${apiPrefix}_API_REQUEST` }); // state.loading :true\n\n      if (requsetType === \"POST\") {\n        res = await axiosInstance.post(`${apiPrefix}${url}`, formData);\n      } else if (requsetType === \"PUT\" && paramId !== undefined) {\n        res = await axiosInstance.put(\n          `${apiPrefix}${url}/${paramId}`,\n          formData\n        );\n      } else if (requsetType === \"GET\") {\n        if (paramId !== undefined) {\n          res = await axiosInstance.get(`${apiPrefix}${url}/${paramId}`);\n        } else {\n          res = await axiosInstance.get(`${apiPrefix}${url}`);\n        }\n      } else if (requsetType === \"DELETE\") {\n        if (paramId !== undefined) {\n          res = await axiosInstance.delete(`${apiPrefix}${url}/${paramId}`);\n        } else {\n          res = await axiosInstance.delete(`${apiPrefix}${url}`);\n        }\n      }\n\n      if (res.status === 200 && apiPrefix === \"USER\") {\n        action({\n          type: `${apiPrefix}_API_SUCCESS`,\n          message: res.data.message,\n          username: res.data.username,\n          email: res.data.email,\n        });\n\n        toast.success(res.data.message);\n        return true;\n      }\n\n      if (res.status === 200 && apiPrefix === \"POST\") {\n        action({\n          type: `${apiPrefix}_API_SUCCESS`,\n          postArr: res.data.payload,\n          message: res.data.message,\n        });\n\n        toast.success(res.data.message);\n\n        return true;\n      }\n\n    } catch (err) {\n      console.error(err);\n\n      if (err.message === \"Network Error\") {\n        toast.error(\"Network error. Please check your connection.\");\n        return;\n      } else {\n        const errorMessage =\n          err.response?.data?.message || \"Something went wrong\";\n\n        action({\n          type: `${apiPrefix}_API_FAILURE`,\n          error: err,\n          message: errorMessage,\n        });\n\n        toast.error(errorMessage); \n      }\n\n      return false;\n    }\n  };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}